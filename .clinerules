# LLVM IR to CFG Visualizer - プロジェクトルール

## プロジェクト構造

- `components/`: Reactコンポーネント
  - `IREditor.tsx`: LLVM IRエディタコンポーネント
  - `CFGViewer.tsx`: CFG描画コンポーネント
  - `Layout.tsx`: 全体レイアウト
- `lib/`: ユーティリティ関数とコアロジック
  - `parser/`: LLVM IR解析関連
  - `cfg/`: CFG生成関連
  - `utils/`: 汎用ユーティリティ
- `pages/`: Next.jsページ
- `public/`: 静的ファイル
- `styles/`: CSSファイル
- `.github/workflows/`: GitHub Actions設定

## コーディング規約

1. **TypeScript**:
   - 厳格な型付けを使用する
   - `any`型の使用を避ける
   - インターフェースを積極的に定義する

2. **コンポーネント**:
   - 関数コンポーネントとReact Hooksを使用
   - Propsにはインターフェースを定義
   - 大きなコンポーネントは小さなコンポーネントに分割

3. **スタイリング**:
   - Tailwind CSSを使用
   - 共通のスタイルはユーティリティクラスとして抽出
   - レスポンシブデザインを考慮

4. **状態管理**:
   - 単純な状態はReact Hooksで管理
   - 複雑な状態が必要になった場合はContextAPIを検討

## LLVM IR解析のアプローチ

1. **基本ブロックの識別**:
   - ラベル（`label:`形式）で始まるブロック
   - 終端命令（`br`, `ret`, `switch`など）で終わるブロック

2. **制御フロー命令**:
   - `br`: 無条件分岐と条件分岐
   - `switch`: 複数分岐
   - `ret`: 関数からの戻り
   - `invoke`: 例外処理を伴う関数呼び出し

3. **パース戦略**:
   - 正規表現ベースの簡易パーサーを実装
   - 段階的に対応命令を増やす

## CFG生成とレンダリング

1. **グラフデータ構造**:
   - ノード: 基本ブロック（ID、ラベル、命令リスト）
   - エッジ: 制御フロー（ソース、ターゲット、条件ラベル）

2. **レイアウト**:
   - dagre-d3を使用した階層的レイアウト
   - 上から下への流れを基本とする
   - ノードサイズはコンテンツに応じて自動調整

3. **視覚的スタイル**:
   - ノード: 角丸の長方形、コンテンツに合わせて伸縮
   - エッジ: 矢印付きの線、条件ラベル付き
   - テキスト: 等幅フォントでコード表示、左右に適切な余白

## UI設計ガイドライン

1. **IRエディタ**:
   - 行番号表示を左側に配置
   - フォントサイズは14pxを基本とする
   - シンタックスハイライトはPrism.jsのテーマを使用
   - カーソルとコードの位置が一致するよう厳密なスタイル設定

2. **CFGビューア**:
   - ノードはテキスト内容に応じて自動的にサイズ調整
   - テキストは左右に均等な余白を確保（最低10px）
   - テキストの縁取りは使用せず、読みやすさを優先
   - ズーム・パン機能を提供し、大きなグラフも閲覧可能

3. **レスポンシブデザイン**:
   - 画面幅に応じて左右のパネルの比率を調整
   - モバイル表示では上下に配置を変更（将来的な拡張）
   - 最小表示幅・高さを設定し、コンポーネントの崩れを防止

## デプロイ戦略

1. **GitHub Actions**:
   - mainブランチへのプッシュでビルドとデプロイを自動化
   - Next.jsの静的エクスポート機能を使用
   - 最新のアクションバージョンを使用（v4以降）

2. **GitHub Pages**:
   - `gh-pages`ブランチにデプロイ
   - カスタムドメイン設定: llvm-cfg.kakudo.org
   - HTTPS対応

## パフォーマンス考慮事項

1. **解析処理**:
   - 大きなIRコードの場合はデバウンス処理を実装
   - 必要に応じてWeb Workersを使用

2. **レンダリング**:
   - 大規模グラフの場合は段階的レンダリングを検討
   - メモ化を活用して不要な再レンダリングを防止

## テスト戦略

1. **ユニットテスト**:
   - パーサーとCFG生成ロジックのテスト
   - 代表的なLLVM IRパターンのテストケース

2. **コンポーネントテスト**:
   - UIコンポーネントの基本機能テスト
   - インタラクションのテスト

3. **E2Eテスト**:
   - 基本的なユーザーフローのテスト
   - 異なるブラウザでのテスト
